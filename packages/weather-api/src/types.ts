// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/alerts": {
    /** @description Returns all alerts */
    get: operations["alerts_query"];
  };
  "/alerts/active": {
    /** @description Returns all currently active alerts */
    get: operations["alerts_active"];
  };
  "/alerts/active/count": {
    /** @description Returns info on the number of active alerts */
    get: operations["alerts_active_count"];
  };
  "/alerts/active/zone/{zoneId}": {
    /** @description Returns active alerts for the given NWS public zone or county */
    get: operations["alerts_active_zone"];
    parameters: {
      path: {
        zoneId: components["parameters"]["NWSZoneId"];
      };
    };
  };
  "/alerts/active/area/{area}": {
    /** @description Returns active alerts for the given area (state or marine area) */
    get: operations["alerts_active_area"];
    parameters: {
      path: {
        /** @description State/area ID */
        area: components["schemas"]["AreaCode"];
      };
    };
  };
  "/alerts/active/region/{region}": {
    /** @description Returns active alerts for the given marine region */
    get: operations["alerts_active_region"];
    parameters: {
      path: {
        /** @description Marine region ID */
        region: components["schemas"]["MarineRegionCode"];
      };
    };
  };
  "/alerts/types": {
    /** @description Returns a list of alert types */
    get: operations["alerts_types"];
  };
  "/alerts/{id}": {
    /** @description Returns a specific alert */
    get: operations["alerts_single"];
    parameters: {
      path: {
        /** @description Alert identifier */
        id: components["schemas"]["AlertId"];
      };
    };
  };
  "/aviation/cwsus/{cwsuId}": {
    /** @description Returns metadata about a Center Weather Service Unit */
    get: operations["cwsu"];
  };
  "/aviation/cwsus/{cwsuId}/cwas": {
    /** @description Returns a list of Center Weather Advisories from a CWSU */
    get: operations["cwas"];
  };
  "/aviation/cwsus/{cwsuId}/cwas/{date}/{sequence}": {
    /** @description Returns a list of Center Weather Advisories from a CWSU */
    get: operations["cwa"];
  };
  "/aviation/sigmets": {
    /** @description Returns a list of SIGMET/AIRMETs */
    get: operations["sigmetQuery"];
  };
  "/aviation/sigmets/{atsu}": {
    /** @description Returns a list of SIGMET/AIRMETs for the specified ATSU */
    get: operations["sigmetsByATSU"];
  };
  "/aviation/sigmets/{atsu}/{date}": {
    /** @description Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date */
    get: operations["sigmetsByATSUByDate"];
  };
  "/aviation/sigmets/{atsu}/{date}/{time}": {
    /** @description Returns a specific SIGMET/AIRMET */
    get: operations["sigmet"];
  };
  "/glossary": {
    /** @description Returns glossary terms */
    get: operations["glossary"];
  };
  "/gridpoints/{wfo}/{x},{y}": {
    /** @description Returns raw numerical forecast data for a 2.5km grid area */
    get: operations["gridpoint"];
    parameters: {
      path: {
        wfo: components["parameters"]["GridpointWFO"];
        x: components["parameters"]["GridpointX"];
        y: components["parameters"]["GridpointY"];
      };
    };
  };
  "/gridpoints/{wfo}/{x},{y}/forecast": {
    /** @description Returns a textual forecast for a 2.5km grid area */
    get: operations["gridpoint_forecast"];
    parameters: {
      path: {
        wfo: components["parameters"]["GridpointWFO"];
        x: components["parameters"]["GridpointX"];
        y: components["parameters"]["GridpointY"];
      };
    };
  };
  "/gridpoints/{wfo}/{x},{y}/forecast/hourly": {
    /** @description Returns a textual hourly forecast for a 2.5km grid area */
    get: operations["gridpoint_forecast_hourly"];
    parameters: {
      path: {
        wfo: components["parameters"]["GridpointWFO"];
        x: components["parameters"]["GridpointX"];
        y: components["parameters"]["GridpointY"];
      };
    };
  };
  "/gridpoints/{wfo}/{x},{y}/stations": {
    /** @description Returns a list of observation stations usable for a given 2.5km grid area */
    get: operations["gridpoint_stations"];
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        cursor?: components["parameters"]["PaginationCursor"];
      };
      path: {
        wfo: components["parameters"]["GridpointWFO"];
        x: components["parameters"]["GridpointX"];
        y: components["parameters"]["GridpointY"];
      };
    };
  };
  "/icons/{set}/{timeOfDay}/{first}": {
    /**
     * @deprecated
     * @description Returns a forecast icon. Icon services in API are deprecated.
     */
    get: operations["icons"];
    parameters: {
      query?: {
        /** @description Font size */
        size?: ("small" | "medium" | "large") | number;
        /** @description Font size */
        fontsize?: number;
      };
      path: {
        /** @description . */
        set: string;
        /** @description . */
        timeOfDay: string;
        /** @description . */
        first: string;
      };
    };
  };
  "/icons/{set}/{timeOfDay}/{first}/{second}": {
    /**
     * @deprecated
     * @description Returns a forecast icon. Icon services in API are deprecated.
     */
    get: operations["iconsDualCondition"];
    parameters: {
      query?: {
        /** @description Font size */
        size?: ("small" | "medium" | "large") | number;
        /** @description Font size */
        fontsize?: number;
      };
      path: {
        /** @description . */
        set: string;
        /** @description . */
        timeOfDay: string;
        /** @description . */
        first: string;
        /** @description . */
        second: string;
      };
    };
  };
  "/icons": {
    /**
     * @deprecated
     * @description Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
     */
    get: operations["icons_summary"];
  };
  "/thumbnails/satellite/{area}": {
    /**
     * @deprecated
     * @description Returns a thumbnail image for a satellite region. Image services in API are deprecated.
     */
    get: operations["satellite_thumbnails"];
    parameters: {
      path: {
        /** @description . */
        area: "a" | "e" | "g" | "h" | "p" | "s" | "w";
      };
    };
  };
  "/stations/{stationId}/observations": {
    /** @description Returns a list of observations for a given station */
    get: operations["station_observation_list"];
    parameters: {
      path: {
        stationId: components["parameters"]["ObservationStationId"];
      };
    };
  };
  "/stations/{stationId}/observations/latest": {
    /** @description Returns the latest observation for a station */
    get: operations["station_observation_latest"];
    parameters: {
      path: {
        stationId: components["parameters"]["ObservationStationId"];
      };
    };
  };
  "/stations/{stationId}/observations/{time}": {
    /** @description Returns a single observation. */
    get: operations["station_observation_time"];
    parameters: {
      path: {
        stationId: components["parameters"]["ObservationStationId"];
      };
    };
  };
  "/stations/{stationId}/tafs": {
    /** @description Returns Terminal Aerodrome Forecasts for the specified airport station. */
    get: operations["tafs"];
  };
  "/stations/{stationId}/tafs/{date}/{time}": {
    /** @description Returns a single Terminal Aerodrome Forecast. */
    get: operations["taf"];
  };
  "/stations": {
    /** @description Returns a list of observation stations. */
    get: operations["obs_stations"];
  };
  "/stations/{stationId}": {
    /** @description Returns metadata about a given observation station */
    get: operations["obs_station"];
    parameters: {
      path: {
        stationId: components["parameters"]["ObservationStationId"];
      };
    };
  };
  "/offices/{officeId}": {
    /** @description Returns metadata about a NWS forecast office */
    get: operations["office"];
    parameters: {
      path: {
        officeId: components["parameters"]["NWSOfficeId"];
      };
    };
  };
  "/offices/{officeId}/headlines/{headlineId}": {
    /** @description Returns a specific news headline for a given NWS office */
    get: operations["office_headline"];
    parameters: {
      path: {
        officeId: components["parameters"]["NWSOfficeId"];
        /** @description Headline record ID */
        headlineId: string;
      };
    };
  };
  "/offices/{officeId}/headlines": {
    /** @description Returns a list of news headlines for a given NWS office */
    get: operations["office_headlines"];
    parameters: {
      path: {
        officeId: components["parameters"]["NWSOfficeId"];
      };
    };
  };
  "/points/{point}": {
    /** @description Returns metadata about a given latitude/longitude point */
    get: operations["point"];
    parameters: {
      path: {
        point: components["parameters"]["PathPoint"];
      };
    };
  };
  "/points/{point}/stations": {
    /**
     * @deprecated
     * @description Returns a list of observation stations for a given point
     */
    get: operations["point_stations"];
    parameters: {
      path: {
        point: components["parameters"]["PathPoint"];
      };
    };
  };
  "/radar/servers": {
    /** @description Returns a list of radar servers */
    get: operations["radar_servers"];
  };
  "/radar/servers/{id}": {
    /** @description Returns metadata about a given radar server */
    get: operations["radar_server"];
    parameters: {
      path: {
        /** @description Server ID */
        id: string;
      };
    };
  };
  "/radar/stations": {
    /** @description Returns a list of radar stations */
    get: operations["radar_stations"];
  };
  "/radar/stations/{stationId}": {
    /** @description Returns metadata about a given radar station */
    get: operations["radar_station"];
    parameters: {
      path: {
        /** @description Radar station ID */
        stationId: string;
      };
    };
  };
  "/radar/stations/{stationId}/alarms": {
    /** @description Returns metadata about a given radar station alarms */
    get: operations["radar_station_alarms"];
    parameters: {
      path: {
        /** @description Radar station ID */
        stationId: string;
      };
    };
  };
  "/radar/queues/{host}": {
    /** @description Returns metadata about a given radar queue */
    get: operations["radar_queue"];
    parameters: {
      path: {
        /** @description LDM host */
        host: string;
      };
    };
  };
  "/radar/profilers/{stationId}": {
    /** @description Returns metadata about a given radar wind profiler */
    get: operations["radar_profiler"];
    parameters: {
      path: {
        /** @description Profiler station ID */
        stationId: string;
      };
    };
  };
  "/products": {
    /** @description Returns a list of text products */
    get: operations["products_query"];
  };
  "/products/locations": {
    /** @description Returns a list of valid text product issuance locations */
    get: operations["product_locations"];
  };
  "/products/types": {
    /** @description Returns a list of valid text product types and codes */
    get: operations["product_types"];
  };
  "/products/{productId}": {
    /** @description Returns a specific text product */
    get: operations["product"];
    parameters: {
      path: {
        /** @description . */
        productId: string;
      };
    };
  };
  "/products/types/{typeId}": {
    /** @description Returns a list of text products of a given type */
    get: operations["products_type"];
    parameters: {
      path: {
        /** @description . */
        typeId: string;
      };
    };
  };
  "/products/types/{typeId}/locations": {
    /** @description Returns a list of valid text product issuance locations for a given product type */
    get: operations["products_type_locations"];
    parameters: {
      path: {
        /** @description . */
        typeId: string;
      };
    };
  };
  "/products/locations/{locationId}/types": {
    /** @description Returns a list of valid text product types for a given issuance location */
    get: operations["location_products"];
    parameters: {
      path: {
        /** @description . */
        locationId: string;
      };
    };
  };
  "/products/types/{typeId}/locations/{locationId}": {
    /** @description Returns a list of text products of a given type for a given issuance location */
    get: operations["products_type_location"];
    parameters: {
      path: {
        /** @description . */
        typeId: string;
        /** @description . */
        locationId: string;
      };
    };
  };
  "/zones": {
    /** @description Returns a list of zones */
    get: operations["zone_list"];
  };
  "/zones/{type}": {
    /** @description Returns a list of zones of a given type */
    get: operations["zone_list_type"];
    parameters: {
      path: {
        /** @description Zone type */
        type: components["schemas"]["NWSZoneType"];
      };
    };
  };
  "/zones/{type}/{zoneId}": {
    /** @description Returns metadata about a given zone */
    get: operations["zone"];
    parameters: {
      path: {
        /** @description Zone type */
        type: components["schemas"]["NWSZoneType"];
        zoneId: components["parameters"]["NWSZoneId"];
      };
    };
  };
  "/zones/{type}/{zoneId}/forecast": {
    /** @description Returns the current zone forecast for a given zone */
    get: operations["zone_forecast"];
    parameters: {
      path: {
        /** @description Zone type */
        type: string;
        zoneId: components["parameters"]["NWSZoneId"];
      };
    };
  };
  "/zones/forecast/{zoneId}/observations": {
    /** @description Returns a list of observations for a given zone */
    get: operations["zone_obs"];
    parameters: {
      path: {
        zoneId: components["parameters"]["NWSZoneId"];
      };
    };
  };
  "/zones/forecast/{zoneId}/stations": {
    /** @description Returns a list of observation stations for a given zone */
    get: operations["zone_stations"];
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        cursor?: components["parameters"]["PaginationCursor"];
      };
      path: {
        zoneId: components["parameters"]["NWSZoneId"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description An object representing a public alert message.
     * Unless otherwise noted, the fields in this object correspond to the National Weather Service CAP v1.2 specification, which extends the OASIS Common Alerting Protocol (CAP) v1.2 specification and USA Integrated Public Alert and Warning System (IPAWS) Profile v1.0. Refer to this documentation for more complete information.
     * http://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html http://docs.oasis-open.org/emergency/cap/v1.2/ipaws-profile/v1.0/cs01/cap-v1.2-ipaws-profile-cs01.html https://alerts.weather.gov/#technical-notes-v12
     */
    Alert: {
      id?: components["schemas"]["AlertId"];
      /** @description A textual description of the area affected by the alert. */
      areaDesc?: string;
      /** @description Lists of codes for NWS public zones and counties affected by the alert. */
      geocode?: {
        /** @description A list of NWS public zone or county identifiers. */
        UGC?: components["schemas"]["NWSZoneID"][];
        /** @description A list of SAME (Specific Area Message Encoding) codes for affected counties. */
        SAME?: string[];
      };
      /** @description An array of API links for zones affected by the alert. This is an API-specific extension field and is not part of the CAP specification. */
      affectedZones?: string[];
      /** @description A list of prior alerts that this alert updates or replaces. */
      references?: {
        /**
         * Format: uri
         * @description An API link to the prior alert.
         */
        "@id"?: string;
        identifier?: components["schemas"]["AlertId"];
        /** @description The sender of the prior alert. */
        sender?: string;
        /**
         * Format: date-time
         * @description The time the prior alert was sent.
         */
        sent?: string;
      }[];
      /**
       * Format: date-time
       * @description The time of the origination of the alert message.
       */
      sent?: string;
      /**
       * Format: date-time
       * @description The effective time of the information of the alert message.
       */
      effective?: string;
      /**
       * Format: date-time
       * @description The expected time of the beginning of the subject event of the alert message.
       */
      onset?: string | null;
      /**
       * Format: date-time
       * @description The expiry time of the information of the alert message.
       */
      expires?: string;
      /**
       * Format: date-time
       * @description The expected end time of the subject event of the alert message.
       */
      ends?: string | null;
      status?: components["schemas"]["AlertStatus"];
      messageType?: components["schemas"]["AlertMessageType"];
      /**
       * @description The code denoting the category of the subject event of the alert message.
       * @enum {string}
       */
      category?:
        | "Met"
        | "Geo"
        | "Safety"
        | "Security"
        | "Rescue"
        | "Fire"
        | "Health"
        | "Env"
        | "Transport"
        | "Infra"
        | "CBRNE"
        | "Other";
      severity?: components["schemas"]["AlertSeverity"];
      certainty?: components["schemas"]["AlertCertainty"];
      urgency?: components["schemas"]["AlertUrgency"];
      /** @description The text denoting the type of the subject event of the alert message. */
      event?: string;
      /** @description Email address of the NWS webmaster. */
      sender?: string;
      /** @description The text naming the originator of the alert message. */
      senderName?: string;
      /** @description The text headline of the alert message. */
      headline?: string | null;
      /** @description The text describing the subject event of the alert message. */
      description?: string;
      /** @description The text describing the recommended action to be taken by recipients of the alert message. */
      instruction?: string | null;
      /**
       * @description The code denoting the type of action recommended for the target audience.
       * This corresponds to responseType in the CAP specification.
       *
       * @enum {string}
       */
      response?:
        | "Shelter"
        | "Evacuate"
        | "Prepare"
        | "Execute"
        | "Avoid"
        | "Monitor"
        | "Assess"
        | "AllClear"
        | "None";
      /**
       * @description System-specific additional parameters associated with the alert message.
       * The keys in this object correspond to parameter definitions in the NWS CAP specification.
       */
      parameters?: Record<string, unknown[]>;
    };
    AlertCollection: {
      /** @description A title describing the alert collection */
      title?: string;
      /**
       * Format: date-time
       * @description The last time a change occurred to this collection
       */
      updated?: string;
      pagination?: components["schemas"]["PaginationInfo"];
    };
    AlertCollectionGeoJson: components["schemas"]["GeoJsonFeatureCollection"] & {
      features?: {
        properties?: components["schemas"]["Alert"];
      }[];
    } & components["schemas"]["AlertCollection"];
    AlertCollectionJsonLd: components["schemas"]["AlertCollection"] & {
      "@context"?: components["schemas"]["JsonLdContext"];
      "@graph"?: components["schemas"]["Alert"][];
    };
    AlertCap: Record<string, never>;
    AlertGeoJson: components["schemas"]["GeoJsonFeature"] & {
      properties?: components["schemas"]["Alert"];
    };
    AlertJsonLd: {
      "@graph"?: components["schemas"]["Alert"][];
    };
    /** @description The identifier of the alert message. */
    AlertId: string;
    /** @enum {string} */
    AlertCertainty: "Observed" | "Likely" | "Possible" | "Unlikely" | "Unknown";
    /** @enum {string} */
    AlertMessageType: "Alert" | "Update" | "Cancel" | "Ack" | "Error";
    /** @enum {string} */
    AlertSeverity: "Extreme" | "Severe" | "Moderate" | "Minor" | "Unknown";
    /** @enum {string} */
    AlertStatus: "Actual" | "Exercise" | "System" | "Test" | "Draft";
    /** @enum {string} */
    AlertUrgency: "Immediate" | "Expected" | "Future" | "Past" | "Unknown";
    /** @description An alert entry in an Atom feed */
    AlertAtomEntry: {
      id?: string;
      updated?: string;
      published?: string;
      author?: {
        name?: string;
      };
      summary?: string;
      event?: string;
      sent?: string;
      effective?: string;
      expires?: string;
      status?: string;
      msgType?: string;
      category?: string;
      urgency?: string;
      severity?: string;
      certainty?: string;
      areaDesc?: string;
      polygon?: string;
      geocode?: components["schemas"]["AlertXMLParameter"][];
      parameter?: components["schemas"]["AlertXMLParameter"][];
    };
    AlertXMLParameter: {
      valueName?: string;
      value?: string;
    };
    /** @description An alert feed in Atom format */
    AlertAtomFeed: {
      id?: string;
      generator?: string;
      updated?: string;
      author?: {
        name?: string;
      };
      title?: string;
      entry?: components["schemas"]["AlertAtomEntry"][];
    };
    /** @description State/territory codes and marine area codes */
    AreaCode:
      | components["schemas"]["StateTerritoryCode"]
      | components["schemas"]["MarineAreaCode"];
    /** @description ATSU Identifier */
    ATSUIdentifier: string;
    /** Format: binary */
    BinaryFile: string;
    CenterWeatherAdvisoryCollectionGeoJson: components["schemas"]["GeoJsonFeatureCollection"] & {
      features?: {
        properties?: components["schemas"]["CenterWeatherAdvisory"];
      }[];
    };
    CenterWeatherAdvisoryGeoJson: components["schemas"]["GeoJsonFeature"] & {
      properties?: components["schemas"]["CenterWeatherAdvisory"];
    };
    CenterWeatherAdvisory: {
      id?: string;
      /** Format: date-time */
      issueTime?: string;
      cwsu?: components["schemas"]["NWSCenterWeatherServiceUnitId"];
      sequence?: number;
      /** Format: date-time */
      start?: string;
      /** Format: date-time */
      end?: string;
      observedProperty?: string;
      text?: string;
    };
    CenterWeatherServiceUnitJsonLd: components["schemas"]["Office"];
    /**
     * Format: date
     * @description Date (in YYYY-MM-DD format).
     */
    Date: string;
    /**
     * Format: wkt
     * @description A geometry represented in Well-Known Text (WKT) format.
     */
    GeometryString: string | null;
    /** @description A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format. */
    GeoJsonBoundingBox: number[];
    /** @description A GeoJSON coordinate. Please refer to IETF RFC 7946 for information on the GeoJSON format. */
    GeoJsonCoordinate: number[];
    /** @description A GeoJSON geometry object. Please refer to IETF RFC 7946 for information on the GeoJSON format. */
    GeoJsonGeometry:
      | {
          /** @enum {string} */
          type: "Point";
          coordinates: components["schemas"]["GeoJsonCoordinate"];
          bbox?: components["schemas"]["GeoJsonBoundingBox"];
        }
      | {
          /** @enum {string} */
          type: "LineString";
          coordinates: components["schemas"]["GeoJsonLineString"];
          bbox?: components["schemas"]["GeoJsonBoundingBox"];
        }
      | {
          /** @enum {string} */
          type: "Polygon";
          coordinates: components["schemas"]["GeoJsonPolygon"];
          bbox?: components["schemas"]["GeoJsonBoundingBox"];
        }
      | {
          /** @enum {string} */
          type: "MultiPoint";
          coordinates: components["schemas"]["GeoJsonCoordinate"][];
          bbox?: components["schemas"]["GeoJsonBoundingBox"];
        }
      | {
          /** @enum {string} */
          type: "MultiLineString";
          coordinates: components["schemas"]["GeoJsonLineString"][];
          bbox?: components["schemas"]["GeoJsonBoundingBox"];
        }
      | {
          /** @enum {string} */
          type: "MultiPolygon";
          coordinates: components["schemas"]["GeoJsonPolygon"][];
          bbox?: components["schemas"]["GeoJsonBoundingBox"];
        }
      | null;
    /** @description A GeoJSON feature. Please refer to IETF RFC 7946 for information on the GeoJSON format. */
    GeoJsonFeature: {
      "@context"?: components["schemas"]["JsonLdContext"];
      /** Format: uri */
      id?: string;
      /** @enum {string} */
      type: "Feature";
      geometry: components["schemas"]["GeoJsonGeometry"];
      properties: Record<string, never>;
    };
    /** @description A GeoJSON feature collection. Please refer to IETF RFC 7946 for information on the GeoJSON format. */
    GeoJsonFeatureCollection: {
      "@context"?: components["schemas"]["JsonLdContext"];
      /** @enum {string} */
      type: "FeatureCollection";
      features: components["schemas"]["GeoJsonFeature"][];
    };
    /** @description A GeoJSON line string. Please refer to IETF RFC 7946 for information on the GeoJSON format. */
    GeoJsonLineString: components["schemas"]["GeoJsonCoordinate"][];
    /** @description A GeoJSON polygon. Please refer to IETF RFC 7946 for information on the GeoJSON format. */
    GeoJsonPolygon: components["schemas"]["GeoJsonCoordinate"][][];
    /**
     * @description Raw forecast data for a 2.5km grid square.
     * This is a list of all potential data layers that may appear. Some layers may not be present in all areas.
     * * temperature
     * * dewpoint
     * * maxTemperature
     * * minTemperature
     * * relativeHumidity
     * * apparentTemperature
     * * heatIndex
     * * windChill
     * * wetBulbGlobeTemperature
     * * skyCover
     * * windDirection
     * * windSpeed
     * * windGust
     * * weather
     * * hazards: Watch and advisory products in effect
     * * probabilityOfPrecipitation
     * * quantitativePrecipitation
     * * iceAccumulation
     * * snowfallAmount
     * * snowLevel
     * * ceilingHeight
     * * visibility
     * * transportWindSpeed
     * * transportWindDirection
     * * mixingHeight
     * * hainesIndex
     * * lightningActivityLevel
     * * twentyFootWindSpeed
     * * twentyFootWindDirection
     * * waveHeight
     * * wavePeriod
     * * waveDirection
     * * primarySwellHeight
     * * primarySwellDirection
     * * secondarySwellHeight
     * * secondarySwellDirection
     * * wavePeriod2
     * * windWaveHeight
     * * dispersionIndex
     * * pressure: Barometric pressure
     * * probabilityOfTropicalStormWinds
     * * probabilityOfHurricaneWinds
     * * potentialOf15mphWinds
     * * potentialOf25mphWinds
     * * potentialOf35mphWinds
     * * potentialOf45mphWinds
     * * potentialOf20mphWindGusts
     * * potentialOf30mphWindGusts
     * * potentialOf40mphWindGusts
     * * potentialOf50mphWindGusts
     * * potentialOf60mphWindGusts
     * * grasslandFireDangerIndex
     * * probabilityOfThunder
     * * davisStabilityIndex
     * * atmosphericDispersionIndex
     * * lowVisibilityOccurrenceRiskIndex
     * * stability
     * * redFlagThreatIndex
     */
    Gridpoint: {
      "@context"?: components["schemas"]["JsonLdContext"];
      geometry?: components["schemas"]["GeometryString"];
      /** Format: uri */
      "@id"?: string;
      /** @enum {string} */
      "@type"?: "wx:Gridpoint";
      /** Format: date-time */
      updateTime?: string;
      validTimes?: components["schemas"]["ISO8601Interval"];
      elevation?: components["schemas"]["QuantitativeValue"];
      /** Format: uri */
      forecastOffice?: string;
      gridId?: string;
      gridX?: number;
      gridY?: number;
      weather?: {
        values: {
          validTime: components["schemas"]["ISO8601Interval"];
          value: {
            /** @enum {string|null} */
            coverage:
              | "areas"
              | "brief"
              | "chance"
              | "definite"
              | "few"
              | "frequent"
              | "intermittent"
              | "isolated"
              | "likely"
              | "numerous"
              | "occasional"
              | "patchy"
              | "periods"
              | "scattered"
              | "slight_chance"
              | "widespread"
              | null;
            /** @enum {string|null} */
            weather:
              | "blowing_dust"
              | "blowing_sand"
              | "blowing_snow"
              | "drizzle"
              | "fog"
              | "freezing_fog"
              | "freezing_drizzle"
              | "freezing_rain"
              | "freezing_spray"
              | "frost"
              | "hail"
              | "haze"
              | "ice_crystals"
              | "ice_fog"
              | "rain"
              | "rain_showers"
              | "sleet"
              | "smoke"
              | "snow"
              | "snow_showers"
              | "thunderstorms"
              | "volcanic_ash"
              | "water_spouts"
              | null;
            /** @enum {string|null} */
            intensity: "very_light" | "light" | "moderate" | "heavy" | null;
            visibility: components["schemas"]["QuantitativeValue"];
            attributes: (
              | "damaging_wind"
              | "dry_thunderstorms"
              | "flooding"
              | "gusty_wind"
              | "heavy_rain"
              | "large_hail"
              | "small_hail"
              | "tornadoes"
            )[];
          }[];
        }[];
      };
      hazards?: {
        values: {
          validTime: components["schemas"]["ISO8601Interval"];
          value: {
            /** @description Hazard code. This value will correspond to a P-VTEC phenomenon code as defined in NWS Directive 10-1703. */
            phenomenon: string;
            /**
             * @description Significance code. This value will correspond to a P-VTEC significance code as defined in NWS Directive 10-1703.
             * This will most frequently be "A" for a watch or "Y" for an advisory.
             */
            significance: string;
            /** @description Event number. If this hazard refers to a national or regional center product (such as a Storm Prediction Center convective watch), this value will be the sequence number of that product. */
            event_number: number | null;
          }[];
        }[];
      };
      [key: string]:
        | components["schemas"]["GridpointQuantitativeValueLayer"]
        | undefined;
    };
    /** @description A gridpoint layer consisting of quantitative values (numeric values with associated units of measure). */
    GridpointQuantitativeValueLayer: {
      uom?: components["schemas"]["UnitOfMeasure"];
      values: {
        validTime: components["schemas"]["ISO8601Interval"];
        value: number | null;
      }[];
    };
    GridpointGeoJson: components["schemas"]["GeoJsonFeature"] & {
      properties?: components["schemas"]["Gridpoint"];
    };
    GridpointJsonLd: components["schemas"]["Gridpoint"];
    /** @description A multi-day forecast for a 2.5km grid square. */
    GridpointForecast: {
      "@context"?: components["schemas"]["JsonLdContext"];
      geometry?: components["schemas"]["GeometryString"];
      units?: components["schemas"]["GridpointForecastUnits"];
      /** @description The internal generator class used to create the forecast text (used for NWS debugging). */
      forecastGenerator?: string;
      /**
       * Format: date-time
       * @description The time this forecast data was generated.
       */
      generatedAt?: string;
      /**
       * Format: date-time
       * @description The last update time of the data this forecast was generated from.
       */
      updateTime?: string;
      /**
       * Format: date-time
       * @deprecated
       * @description This property is deprecated (use updateTime instead).
       */
      updated?: string;
      validTimes?: components["schemas"]["ISO8601Interval"];
      elevation?: components["schemas"]["QuantitativeValue"];
      /** @description An array of forecast periods. */
      periods?: components["schemas"]["GridpointForecastPeriod"][];
    };
    /** @description An object containing forecast information for a specific time period (generally 12-hour or 1-hour). */
    GridpointForecastPeriod: {
      /** @description Sequential period number. */
      number?: number;
      /**
       * @description A textual identifier for the period. This value will not be present for hourly forecasts.
       *
       * @example Tuesday Night
       */
      name?: string;
      /**
       * Format: date-time
       * @description The starting time that this forecast period is valid for.
       */
      startTime?: string;
      /**
       * Format: date-time
       * @description The ending time that this forecast period is valid for.
       */
      endTime?: string;
      /** @description Indicates whether this period is daytime or nighttime. */
      isDaytime?: boolean;
      /**
       * @description High/low temperature for the period, depending on whether the period is day or night.
       * This property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_temperature_qv" feature flag on the request.
       */
      temperature?: components["schemas"]["QuantitativeValue"] | number;
      /**
       * @deprecated
       * @description The unit of the temperature value (Fahrenheit or Celsius).
       * This property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the "forecast_temperature_qv" feature flag on the request.
       *
       * @enum {string}
       */
      temperatureUnit?: "F" | "C";
      /**
       * @description If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)
       *
       * @enum {string|null}
       */
      temperatureTrend?: "rising" | "falling" | null;
      probabilityOfPrecipitation?: components["schemas"]["QuantitativeValue"];
      dewpoint?: components["schemas"]["QuantitativeValue"];
      relativeHumidity?: components["schemas"]["QuantitativeValue"];
      /**
       * @description Wind speed for the period.
       * This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_wind_speed_qv" feature flag on the request.
       */
      windSpeed?: components["schemas"]["QuantitativeValue"] | string;
      /**
       * @description Peak wind gust for the period.
       * This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_wind_speed_qv" feature flag on the request.
       */
      windGust?: components["schemas"]["QuantitativeValue"] | string | null;
      /**
       * @description The prevailing direction of the wind for the period, using a 16-point compass.
       * @enum {string}
       */
      windDirection?:
        | "N"
        | "NNE"
        | "NE"
        | "ENE"
        | "E"
        | "ESE"
        | "SE"
        | "SSE"
        | "S"
        | "SSW"
        | "SW"
        | "WSW"
        | "W"
        | "WNW"
        | "NW"
        | "NNW";
      /**
       * Format: uri
       * @deprecated
       * @description A link to an icon representing the forecast summary.
       */
      icon?: string;
      /** @description A brief textual forecast summary for the period. */
      shortForecast?: string;
      /** @description A detailed textual forecast for the period. */
      detailedForecast?: string;
    };
    /**
     * @description Denotes the units used in the textual portions of the forecast.
     * @default us
     * @enum {string}
     */
    GridpointForecastUnits: "us" | "si";
    GridpointForecastGeoJson: components["schemas"]["GeoJsonFeature"] & {
      properties?: components["schemas"]["GridpointForecast"];
    };
    GridpointForecastJsonLd: components["schemas"]["GridpointForecast"] & {
      "@context": components["schemas"]["JsonLdContext"];
      geometry: components["schemas"]["GeometryString"];
    };
    /**
     * @description A time duration in ISO 8601 format.
     * @example P2DT12H
     */
    ISO8601Duration: string;
    /**
     * @description A time interval in ISO 8601 format. This can be one of:
     *
     *     1. Start and end time
     *     2. Start time and duration
     *     3. Duration and end time
     * The string "NOW" can also be used in place of a start/end time.
     */
    ISO8601Interval: string;
    JsonLdContext: unknown[] | Record<string, never>;
    /**
     * @description Land region code. These correspond to the six NWS regional headquarters:
     * * AR: Alaska Region
     * * CR: Central Region
     * * ER: Eastern Region
     * * PR: Pacific Region
     * * SR: Southern Region
     * * WR: Western Region
     *
     * @enum {string}
     */
    LandRegionCode: "AR" | "CR" | "ER" | "PR" | "SR" | "WR";
    /**
     * @description Marine area code as defined in NWS Directive 10-302:
     * * AM: Western North Atlantic Ocean and along U.S. East Coast south of Currituck Beach Light NC following the coastline into Gulf of Mexico to Ocean Reef FL including the Caribbean
     * * AN: Western North Atlantic Ocean and along U.S. East Coast from Canadian border south to Currituck Beach Light NC
     * * GM: Gulf of Mexico and along the U.S. Gulf Coast from the Mexican border to Ocean Reef FL
     * * LC: Lake St. Clair
     * * LE: Lake Erie
     * * LH: Lake Huron
     * * LM: Lake Michigan
     * * LO: Lake Ontario
     * * LS: Lake Superior
     * * PH: Central Pacific Ocean including Hawaiian waters
     * * PK: North Pacific Ocean near Alaska and along Alaska coastline including the Bering Sea and the Gulf of Alaska
     * * PM: Western Pacific Ocean including Mariana Island waters
     * * PS: South Central Pacific Ocean including American Samoa waters
     * * PZ: Eastern North Pacific Ocean and along U.S. West Coast from Canadian border to Mexican border
     * * SL: St. Lawrence River above St. Regis
     *
     * @enum {string}
     */
    MarineAreaCode:
      | "AM"
      | "AN"
      | "GM"
      | "LC"
      | "LE"
      | "LH"
      | "LM"
      | "LO"
      | "LS"
      | "PH"
      | "PK"
      | "PM"
      | "PS"
      | "PZ"
      | "SL";
    /**
     * @description Marine region code. These are groups of marine areas combined.
     * * AL: Alaska waters (PK)
     * * AT: Atlantic Ocean (AM, AN)
     * * GL: Great Lakes (LC, LE, LH, LM, LO, LS, SL)
     * * GM: Gulf of Mexico (GM)
     * * PA: Eastern Pacific Ocean and U.S. West Coast (PZ)
     * * PI: Central and Western Pacific (PH, PM, PS)
     *
     * @enum {string}
     */
    MarineRegionCode: "AL" | "AT" | "GL" | "GM" | "PA" | "PI";
    /** @description An object representing a decoded METAR phenomenon string. */
    MetarPhenomenon: {
      /** @enum {string|null} */
      intensity: "light" | "heavy" | null;
      /** @enum {string|null} */
      modifier:
        | "patches"
        | "blowing"
        | "low_drifting"
        | "freezing"
        | "shallow"
        | "partial"
        | "showers"
        | null;
      /** @enum {string} */
      weather:
        | "fog_mist"
        | "dust_storm"
        | "dust"
        | "drizzle"
        | "funnel_cloud"
        | "fog"
        | "smoke"
        | "hail"
        | "snow_pellets"
        | "haze"
        | "ice_crystals"
        | "ice_pellets"
        | "dust_whirls"
        | "spray"
        | "rain"
        | "sand"
        | "snow_grains"
        | "snow"
        | "squalls"
        | "sand_storm"
        | "thunderstorms"
        | "unknown"
        | "volcanic_ash";
      rawString: string;
      inVicinity?: boolean;
    };
    /** @enum {string} */
    MetarSkyCoverage: "OVC" | "BKN" | "SCT" | "FEW" | "SKC" | "CLR" | "VV";
    /**
     * @description Three-letter identifier for a Center Weather Service Unit (CWSU).
     * @enum {string}
     */
    NWSCenterWeatherServiceUnitId:
      | "ZAB"
      | "ZAN"
      | "ZAU"
      | "ZBW"
      | "ZDC"
      | "ZDV"
      | "ZFA"
      | "ZFW"
      | "ZHU"
      | "ZID"
      | "ZJX"
      | "ZKC"
      | "ZLA"
      | "ZLC"
      | "ZMA"
      | "ZME"
      | "ZMP"
      | "ZNY"
      | "ZOA"
      | "ZOB"
      | "ZSE"
      | "ZTL";
    /**
     * @description Three-letter identifier for a NWS office.
     * @enum {string}
     */
    NWSForecastOfficeId:
      | "AKQ"
      | "ALY"
      | "BGM"
      | "BOX"
      | "BTV"
      | "BUF"
      | "CAE"
      | "CAR"
      | "CHS"
      | "CLE"
      | "CTP"
      | "GSP"
      | "GYX"
      | "ILM"
      | "ILN"
      | "LWX"
      | "MHX"
      | "OKX"
      | "PBZ"
      | "PHI"
      | "RAH"
      | "RLX"
      | "RNK"
      | "ABQ"
      | "AMA"
      | "BMX"
      | "BRO"
      | "CRP"
      | "EPZ"
      | "EWX"
      | "FFC"
      | "FWD"
      | "HGX"
      | "HUN"
      | "JAN"
      | "JAX"
      | "KEY"
      | "LCH"
      | "LIX"
      | "LUB"
      | "LZK"
      | "MAF"
      | "MEG"
      | "MFL"
      | "MLB"
      | "MOB"
      | "MRX"
      | "OHX"
      | "OUN"
      | "SHV"
      | "SJT"
      | "SJU"
      | "TAE"
      | "TBW"
      | "TSA"
      | "ABR"
      | "APX"
      | "ARX"
      | "BIS"
      | "BOU"
      | "CYS"
      | "DDC"
      | "DLH"
      | "DMX"
      | "DTX"
      | "DVN"
      | "EAX"
      | "FGF"
      | "FSD"
      | "GID"
      | "GJT"
      | "GLD"
      | "GRB"
      | "GRR"
      | "ICT"
      | "ILX"
      | "IND"
      | "IWX"
      | "JKL"
      | "LBF"
      | "LMK"
      | "LOT"
      | "LSX"
      | "MKX"
      | "MPX"
      | "MQT"
      | "OAX"
      | "PAH"
      | "PUB"
      | "RIW"
      | "SGF"
      | "TOP"
      | "UNR"
      | "BOI"
      | "BYZ"
      | "EKA"
      | "FGZ"
      | "GGW"
      | "HNX"
      | "LKN"
      | "LOX"
      | "MFR"
      | "MSO"
      | "MTR"
      | "OTX"
      | "PDT"
      | "PIH"
      | "PQR"
      | "PSR"
      | "REV"
      | "SEW"
      | "SGX"
      | "SLC"
      | "STO"
      | "TFX"
      | "TWC"
      | "VEF"
      | "AER"
      | "AFC"
      | "AFG"
      | "AJK"
      | "ALU"
      | "GUM"
      | "HPA"
      | "HFO"
      | "PPG"
      | "STU"
      | "NH1"
      | "NH2"
      | "ONA"
      | "ONP";
    /**
     * @description Three-letter identifier for NWS National HQ.
     * @enum {string}
     */
    NWSNationalHQId: "NWS";
    NWSOfficeId:
      | components["schemas"]["NWSForecastOfficeId"]
      | components["schemas"]["NWSRegionalHQId"]
      | components["schemas"]["NWSNationalHQId"];
    /**
     * @description Three-letter identifier for a NWS Regional HQ.
     * @enum {string}
     */
    NWSRegionalHQId: "ARH" | "CRH" | "ERH" | "PRH" | "SRH" | "WRH";
    /**
     * @description UGC identifier for a NWS forecast zone or county.
     * The first two letters will correspond to either a state code or marine area code (see #/components/schemas/StateTerritoryCode and #/components/schemas/MarineAreaCode for lists of valid letter combinations).
     * The third letter will be Z for public/fire zone or C for county.
     */
    NWSZoneID: string;
    /** @enum {string} */
    NWSZoneType:
      | "land"
      | "marine"
      | "forecast"
      | "public"
      | "coastal"
      | "offshore"
      | "fire"
      | "county";
    Observation: {
      "@context"?: components["schemas"]["JsonLdContext"];
      geometry?: components["schemas"]["GeometryString"];
      /** Format: uri */
      "@id"?: string;
      /** @enum {string} */
      "@type"?: "wx:ObservationStation";
      elevation?: components["schemas"]["QuantitativeValue"];
      /** Format: uri */
      station?: string;
      /** Format: date-time */
      timestamp?: string;
      rawMessage?: string;
      textDescription?: string;
      /**
       * Format: uri
       * @deprecated
       */
      icon?: string | null;
      presentWeather?: components["schemas"]["MetarPhenomenon"][];
      temperature?: components["schemas"]["QuantitativeValue"];
      dewpoint?: components["schemas"]["QuantitativeValue"];
      windDirection?: components["schemas"]["QuantitativeValue"];
      windSpeed?: components["schemas"]["QuantitativeValue"];
      windGust?: components["schemas"]["QuantitativeValue"];
      barometricPressure?: components["schemas"]["QuantitativeValue"];
      seaLevelPressure?: components["schemas"]["QuantitativeValue"];
      visibility?: components["schemas"]["QuantitativeValue"];
      maxTemperatureLast24Hours?: components["schemas"]["QuantitativeValue"];
      minTemperatureLast24Hours?: components["schemas"]["QuantitativeValue"];
      precipitationLastHour?: components["schemas"]["QuantitativeValue"];
      precipitationLast3Hours?: components["schemas"]["QuantitativeValue"];
      precipitationLast6Hours?: components["schemas"]["QuantitativeValue"];
      relativeHumidity?: components["schemas"]["QuantitativeValue"];
      windChill?: components["schemas"]["QuantitativeValue"];
      heatIndex?: components["schemas"]["QuantitativeValue"];
      cloudLayers?:
        | {
            base: components["schemas"]["QuantitativeValue"];
            amount: components["schemas"]["MetarSkyCoverage"];
          }[]
        | null;
    };
    ObservationGeoJson: components["schemas"]["GeoJsonFeature"] & {
      properties?: components["schemas"]["Observation"];
    };
    ObservationJsonLd: components["schemas"]["Observation"];
    ObservationCollectionGeoJson: components["schemas"]["GeoJsonFeatureCollection"] & {
      features?: {
        properties?: components["schemas"]["Observation"];
      }[];
    };
    ObservationCollectionJsonLd: {
      "@context"?: components["schemas"]["JsonLdContext"];
      "@graph"?: components["schemas"]["Observation"][];
    };
    ObservationStation: {
      "@context"?: components["schemas"]["JsonLdContext"];
      geometry?: components["schemas"]["GeometryString"];
      /** Format: uri */
      "@id"?: string;
      /** @enum {string} */
      "@type"?: "wx:ObservationStation";
      elevation?: components["schemas"]["QuantitativeValue"];
      stationIdentifier?: string;
      name?: string;
      /** Format: iana-time-zone-identifier */
      timeZone?: string;
      /**
       * Format: uri
       * @description A link to the NWS public forecast zone containing this station.
       */
      forecast?: string;
      /**
       * Format: uri
       * @description A link to the NWS county zone containing this station.
       */
      county?: string;
      /**
       * Format: uri
       * @description A link to the NWS fire weather forecast zone containing this station.
       */
      fireWeatherZone?: string;
    };
    ObservationStationGeoJson: components["schemas"]["GeoJsonFeature"] & {
      properties?: components["schemas"]["ObservationStation"];
    };
    ObservationStationJsonLd: components["schemas"]["ObservationStation"] & {
      "@context": components["schemas"]["JsonLdContext"];
      geometry: components["schemas"]["GeometryString"];
    };
    ObservationStationCollectionGeoJson: components["schemas"]["GeoJsonFeatureCollection"] & {
      features?: {
        properties?: components["schemas"]["ObservationStation"];
      }[];
      observationStations?: string[];
      pagination?: components["schemas"]["PaginationInfo"];
    };
    ObservationStationCollectionJsonLd: {
      "@context"?: components["schemas"]["JsonLdContext"];
      "@graph"?: components["schemas"]["ObservationStation"][];
      observationStations?: string[];
      pagination?: components["schemas"]["PaginationInfo"];
    };
    Office: {
      "@context"?: components["schemas"]["JsonLdContext"];
      /** @enum {string} */
      "@type"?: "GovernmentOrganization";
      /** Format: uri */
      "@id"?: string;
      id?: string;
      name?: string;
      address?: {
        /** @enum {string} */
        "@type"?: "PostalAddress";
        streetAddress?: string;
        addressLocality?: string;
        addressRegion?: string;
        postalCode?: string;
      };
      telephone?: string;
      faxNumber?: string;
      email?: string;
      /** Format: uri */
      sameAs?: string;
      nwsRegion?: string;
      /** Format: uri */
      parentOrganization?: string;
      responsibleCounties?: string[];
      responsibleForecastZones?: string[];
      responsibleFireZones?: string[];
      approvedObservationStations?: string[];
    };
    OfficeHeadline: {
      "@context"?: components["schemas"]["JsonLdContext"];
      /** Format: uri */
      "@id"?: string;
      id?: string;
      /** Format: uri */
      office?: string;
      important?: boolean;
      /** Format: date-time */
      issuanceTime?: string;
      /** Format: uri */
      link?: string;
      name?: string;
      title?: string;
      summary?: string | null;
      content?: string;
    };
    OfficeHeadlineCollection: {
      "@context": components["schemas"]["JsonLdContext"];
      "@graph": components["schemas"]["OfficeHeadline"][];
    };
    /** @description Links for retrieving more data from paged data sets */
    PaginationInfo: {
      /**
       * Format: uri
       * @description A link to the next page of records
       */
      next: string;
    };
    Point: {
      "@context"?: components["schemas"]["JsonLdContext"];
      geometry?: components["schemas"]["GeometryString"];
      /** Format: uri */
      "@id"?: string;
      /** @enum {string} */
      "@type"?: "wx:Point";
      cwa?: components["schemas"]["NWSForecastOfficeId"];
      /** Format: uri */
      forecastOffice?: string;
      gridId?: components["schemas"]["NWSForecastOfficeId"];
      gridX?: number;
      gridY?: number;
      /** Format: uri */
      forecast?: string;
      /** Format: uri */
      forecastHourly?: string;
      /** Format: uri */
      forecastGridData?: string;
      /** Format: uri */
      observationStations?: string;
      relativeLocation?:
        | components["schemas"]["RelativeLocationGeoJson"]
        | components["schemas"]["RelativeLocationJsonLd"];
      /** Format: uri */
      forecastZone?: string;
      /** Format: uri */
      county?: string;
      /** Format: uri */
      fireWeatherZone?: string;
      timeZone?: string;
      radarStation?: string;
    };
    PointGeoJson: components["schemas"]["GeoJsonFeature"] & {
      properties?: components["schemas"]["Point"];
    };
    PointJsonLd: components["schemas"]["Point"] & {
      "@context": components["schemas"]["JsonLdContext"];
      geometry: components["schemas"]["GeometryString"];
    };
    PointString: string;
    /** @description Detail about an error. This document conforms to RFC 7807 (Problem Details for HTTP APIs). */
    ProblemDetail: {
      /**
       * Format: uri
       * @description A URI reference (RFC 3986) that identifies the problem type. This is only an identifier and is not necessarily a resolvable URL.
       *
       * @default about:blank
       * @example urn:noaa:nws:api:UnexpectedProblem
       */
      type: string;
      /**
       * @description A short, human-readable summary of the problem type.
       * @example Unexpected Problem
       */
      title: string;
      /**
       * @description The HTTP status code (RFC 7231, Section 6) generated by the origin server for this occurrence of the problem.
       *
       * @example 500
       */
      status: number;
      /**
       * @description A human-readable explanation specific to this occurrence of the problem.
       * @example An unexpected problem has occurred.
       */
      detail: string;
      /**
       * Format: uri
       * @description A URI reference (RFC 3986) that identifies the specific occurrence of the problem. This is only an identifier and is not necessarily a resolvable URL.
       *
       * @example urn:noaa:nws:api:request:493c3a1d-f87e-407f-ae2c-24483f5aab63
       */
      instance: string;
      /**
       * @description A unique identifier for the request, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue.
       *
       * @example 493c3a1d-f87e-407f-ae2c-24483f5aab63
       */
      correlationId: string;
      [key: string]: unknown;
    };
    /** @description A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue */
    QuantitativeValue: {
      /** @description A measured value */
      value?: number | null;
      /** @description The maximum value of a range of measured values */
      maxValue?: number;
      /** @description The minimum value of a range of measured values */
      minValue?: number;
      unitCode?: components["schemas"]["UnitOfMeasure"];
      /**
       * @description For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml
       *
       * @enum {string}
       */
      qualityControl?: "Z" | "C" | "S" | "V" | "X" | "Q" | "G" | "B" | "T";
    };
    RegionCode:
      | components["schemas"]["LandRegionCode"]
      | components["schemas"]["MarineRegionCode"];
    RelativeLocation: {
      city?: string;
      state?: string;
      distance?: components["schemas"]["QuantitativeValue"];
      bearing?: components["schemas"]["QuantitativeValue"];
    };
    RelativeLocationGeoJson: components["schemas"]["GeoJsonFeature"] & {
      properties?: components["schemas"]["RelativeLocation"];
    };
    RelativeLocationJsonLd: components["schemas"]["RelativeLocation"] & {
      geometry: components["schemas"]["GeometryString"];
    };
    Sigmet: {
      /** Format: uri */
      id?: string;
      /** Format: date-time */
      issueTime?: string;
      fir?: string | null;
      atsu?: components["schemas"]["ATSUIdentifier"];
      sequence?: string | null;
      /** Format: uri */
      phenomenon?: string | null;
      /** Format: date-time */
      start?: string;
      /** Format: date-time */
      end?: string;
    };
    SigmetCollectionGeoJson: components["schemas"]["GeoJsonFeatureCollection"] & {
      features?: components["schemas"]["SigmetGeoJson"][];
    };
    SigmetGeoJson: components["schemas"]["GeoJsonFeature"] & {
      properties?: components["schemas"]["Sigmet"];
    };
    SigmetSequenceNumber: string;
    /** @enum {string} */
    StateTerritoryCode:
      | "AL"
      | "AK"
      | "AS"
      | "AR"
      | "AZ"
      | "CA"
      | "CO"
      | "CT"
      | "DE"
      | "DC"
      | "FL"
      | "GA"
      | "GU"
      | "HI"
      | "ID"
      | "IL"
      | "IN"
      | "IA"
      | "KS"
      | "KY"
      | "LA"
      | "ME"
      | "MD"
      | "MA"
      | "MI"
      | "MN"
      | "MS"
      | "MO"
      | "MT"
      | "NE"
      | "NV"
      | "NH"
      | "NJ"
      | "NM"
      | "NY"
      | "NC"
      | "ND"
      | "OH"
      | "OK"
      | "OR"
      | "PA"
      | "PR"
      | "RI"
      | "SC"
      | "SD"
      | "TN"
      | "TX"
      | "UT"
      | "VT"
      | "VI"
      | "VA"
      | "WA"
      | "WV"
      | "WI"
      | "WY"
      | "MP"
      | "PW"
      | "FM"
      | "MH";
    TextProduct: {
      "@context"?: components["schemas"]["JsonLdContext"];
      /** Format: uri */
      "@id"?: string;
      id?: string;
      wmoCollectiveId?: string;
      issuingOffice?: string;
      /** Format: date-time */
      issuanceTime?: string;
      productCode?: string;
      productName?: string;
      productText?: string;
    };
    TextProductCollection: {
      "@context"?: components["schemas"]["JsonLdContext"];
      "@graph"?: components["schemas"]["TextProduct"][];
    };
    TextProductTypeCollection: {
      "@context"?: components["schemas"]["JsonLdContext"];
      "@graph"?: {
        productCode: string;
        productName: string;
      }[];
    };
    TextProductLocationCollection: {
      "@context"?: components["schemas"]["JsonLdContext"];
      locations?: Record<string, string | null>;
    };
    /** @description A time (in HHMM format). This is always specified in UTC (Zulu) time. */
    Time: string;
    /**
     * @description A string denoting a unit of measure, expressed in the format "{unit}" or "{namespace}:{unit}".
     * Units with the namespace "wmo" or "wmoUnit" are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}.
     * Units with the namespace "nwsUnit" are currently custom and do not align to any standard.
     * Units with no namespace or the namespace "uc" are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156).
     * Namespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future.
     */
    UnitOfMeasure: string;
    Zone: {
      "@context"?: components["schemas"]["JsonLdContext"];
      geometry?: components["schemas"]["GeometryString"];
      /** Format: uri */
      "@id"?: string;
      /** @enum {string} */
      "@type"?: "wx:Zone";
      id?: components["schemas"]["NWSZoneID"];
      type?: components["schemas"]["NWSZoneType"];
      name?: string;
      /** Format: date-time */
      effectiveDate?: string;
      /** Format: date-time */
      expirationDate?: string;
      state?: components["schemas"]["StateTerritoryCode"] | ("" | null);
      cwa?: components["schemas"]["NWSForecastOfficeId"][];
      forecastOffices?: string[];
      timeZone?: string[];
      observationStations?: string[];
      radarStation?: string | null;
    };
    ZoneGeoJson: components["schemas"]["GeoJsonFeature"] & {
      properties?: components["schemas"]["Zone"];
    };
    ZoneJsonLd: components["schemas"]["Zone"];
    ZoneCollectionGeoJson: components["schemas"]["GeoJsonFeatureCollection"] & {
      features?: {
        properties?: components["schemas"]["Zone"];
      }[];
    };
    ZoneCollectionJsonLd: {
      "@context"?: components["schemas"]["JsonLdContext"];
      "@graph"?: components["schemas"]["Zone"][];
    };
    /** @description An object representing a zone area forecast. */
    ZoneForecast: {
      "@context"?: components["schemas"]["JsonLdContext"];
      geometry?: components["schemas"]["GeometryString"];
      /**
       * Format: uri
       * @description An API link to the zone this forecast is for.
       */
      zone?: string;
      /**
       * Format: date-time
       * @description The time this zone forecast product was published.
       */
      updated?: string;
      /** @description An array of forecast periods. */
      periods?: {
        /** @description A sequential identifier number. */
        number: number;
        /**
         * @description A textual description of the period.
         * @example This Afternoon
         */
        name: string;
        /** @description A detailed textual forecast for the period. */
        detailedForecast: string;
      }[];
    };
    ZoneForecastGeoJson: components["schemas"]["GeoJsonFeature"] & {
      properties?: components["schemas"]["ZoneForecast"];
    };
    ZoneForecastJsonLd: components["schemas"]["ZoneForecast"];
  };
  responses: {
    /** @description A collection of alerts. */
    AlertCollection: {
      headers: {
        "X-Correlation-Id": components["headers"]["CorrelationId"];
        "X-Request-Id": components["headers"]["RequestId"];
        "X-Server-Id": components["headers"]["ServerId"];
      };
      content: {
        "application/geo+json": components["schemas"]["AlertCollectionGeoJson"];
        "application/ld+json": components["schemas"]["AlertCollectionJsonLd"];
        "application/atom+xml": components["schemas"]["AlertAtomFeed"];
      };
    };
    /** @description An error response. */
    Error: {
      headers: {
        "X-Correlation-Id": components["headers"]["CorrelationId"];
        "X-Request-Id": components["headers"]["RequestId"];
        "X-Server-Id": components["headers"]["ServerId"];
      };
      content: {
        "application/problem+json": components["schemas"]["ProblemDetail"];
      };
    };
    /** @description A forecast for a gridpoint. */
    GridpointForecast: {
      headers: {
        "X-Correlation-Id": components["headers"]["CorrelationId"];
        "X-Request-Id": components["headers"]["RequestId"];
        "X-Server-Id": components["headers"]["ServerId"];
      };
      content: {
        "application/geo+json": components["schemas"]["GridpointForecastGeoJson"];
        "application/ld+json": components["schemas"]["GridpointForecastJsonLd"];
        "application/vnd.noaa.dwml+xml": unknown;
      };
    };
    /** @description An observation record. */
    Observation: {
      headers: {
        "X-Correlation-Id": components["headers"]["CorrelationId"];
        "X-Request-Id": components["headers"]["RequestId"];
        "X-Server-Id": components["headers"]["ServerId"];
      };
      content: {
        "application/geo+json": components["schemas"]["ObservationGeoJson"];
        "application/ld+json": components["schemas"]["ObservationJsonLd"];
        "application/vnd.noaa.uswx+xml": unknown;
        "application/vnd.noaa.obs+xml": unknown;
      };
    };
    /** @description A collection of observation records. */
    ObservationCollection: {
      headers: {
        "X-Correlation-Id": components["headers"]["CorrelationId"];
        "X-Request-Id": components["headers"]["RequestId"];
        "X-Server-Id": components["headers"]["ServerId"];
      };
      content: {
        "application/geo+json": components["schemas"]["ObservationCollectionGeoJson"];
        "application/ld+json": components["schemas"]["ObservationCollectionJsonLd"];
      };
    };
    /** @description A collection of observation stations. */
    ObservationStationCollection: {
      headers: {
        "X-Correlation-Id": components["headers"]["CorrelationId"];
        "X-Request-Id": components["headers"]["RequestId"];
        "X-Server-Id": components["headers"]["ServerId"];
      };
      content: {
        "application/geo+json": components["schemas"]["ObservationStationCollectionGeoJson"];
        "application/ld+json": components["schemas"]["ObservationStationCollectionJsonLd"];
      };
    };
  };
  parameters: {
    /**
     * @description State/territory code or marine area code
     * This parameter is incompatible with the following parameters: point, region, region_type, zone
     */
    AlertArea?: components["schemas"]["AreaCode"][];
    /** @description Certainty (observed, likely, possible, unlikely, unknown) */
    AlertCertainty?: components["schemas"]["AlertCertainty"][];
    /** @description Event code */
    AlertCode?: string[];
    /** @description Event name */
    AlertEventName?: string[];
    /** @description Message type (alert, update, cancel) */
    AlertMessageType?: ("alert" | "update" | "cancel")[];
    /**
     * @description Point (latitude,longitude)
     * This parameter is incompatible with the following parameters: area, region, region_type, zone
     */
    AlertPoint?: components["schemas"]["PointString"];
    /**
     * @description Marine region code
     * This parameter is incompatible with the following parameters: area, point, region_type, zone
     */
    AlertRegion?: components["schemas"]["MarineRegionCode"][];
    /**
     * @description Region type (land or marine)
     * This parameter is incompatible with the following parameters: area, point, region, zone
     */
    AlertRegionType?: "land" | "marine";
    /** @description Severity (extreme, severe, moderate, minor, unknown) */
    AlertSeverity?: components["schemas"]["AlertSeverity"][];
    /** @description Status (actual, exercise, system, test, draft) */
    AlertStatus?: ("actual" | "exercise" | "system" | "test" | "draft")[];
    /** @description Urgency (immediate, expected, future, past, unknown) */
    AlertUrgency?: components["schemas"]["AlertUrgency"][];
    /**
     * @description Zone ID (forecast or county)
     * This parameter is incompatible with the following parameters: area, point, region, region_type
     */
    AlertZone?: components["schemas"]["NWSZoneID"][];
    /** @description ATSU identifier */
    ATSUIdentifier: components["schemas"]["ATSUIdentifier"];
    /** @description Date (YYYY-MM-DD format) */
    Date: components["schemas"]["Date"];
    /**
     * @description Enable future and experimental features (see documentation for more info):
     * * forecast_temperature_qv: Represent temperature as QuantitativeValue
     * * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue
     */
    GridpointForecastFeatureFlags?: (
      | "forecast_temperature_qv"
      | "forecast_wind_speed_qv"
    )[];
    /** @description Use US customary or SI (metric) units in textual output */
    GridpointForecastUnits?: components["schemas"]["GridpointForecastUnits"];
    /** @description Forecast office ID */
    GridpointWFO: components["schemas"]["NWSForecastOfficeId"];
    /** @description Forecast grid X coordinate */
    GridpointX: number;
    /** @description Forecast grid Y coordinate */
    GridpointY: number;
    /** @description Limit */
    Limit?: number;
    /** @description NWS CWSU ID */
    NWSCenterWeatherServiceUnitId: components["schemas"]["NWSCenterWeatherServiceUnitId"];
    /** @description NWS office ID */
    NWSOfficeId: components["schemas"]["NWSOfficeId"];
    /** @description NWS public zone/county identifier */
    NWSZoneId: components["schemas"]["NWSZoneID"];
    /** @description Observation station ID */
    ObservationStationId: string;
    /** @description Pagination cursor */
    PaginationCursor?: string;
    /** @description Point (latitude, longitude) */
    PathPoint: components["schemas"]["PointString"];
    /** @description Date (YYYY-MM-DD format) */
    QueryDate?: components["schemas"]["Date"];
    /** @description Start time */
    QueryStartTime?: string;
    /** @description End time */
    QueryEndTime?: string;
    /** @description SIGMET sequence number */
    SigmetSequenceNumber: components["schemas"]["SigmetSequenceNumber"];
    /** @description Time (HHMM format). This time is always specified in UTC (Zulu) time. */
    Time: components["schemas"]["Time"];
  };
  requestBodies: never;
  headers: {
    /** @description A unique identifier for the request, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue. */
    CorrelationId: string;
    /** @description A unique identifier for the request, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue. */
    RequestId: string;
    /** @description The identifier of the server that generated the response, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue. */
    ServerId: string;
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** @description Returns all alerts */
  alerts_query: {
    parameters: {
      query?: {
        /**
         * @deprecated
         * @description List only active alerts (use /alerts/active endpoints instead)
         */
        active?: boolean;
        start?: components["parameters"]["QueryStartTime"];
        end?: components["parameters"]["QueryEndTime"];
        status?: components["parameters"]["AlertStatus"];
        message_type?: components["parameters"]["AlertMessageType"];
        event?: components["parameters"]["AlertEventName"];
        code?: components["parameters"]["AlertCode"];
        area?: components["parameters"]["AlertArea"];
        point?: components["parameters"]["AlertPoint"];
        region?: components["parameters"]["AlertRegion"];
        region_type?: components["parameters"]["AlertRegionType"];
        zone?: components["parameters"]["AlertZone"];
        urgency?: components["parameters"]["AlertUrgency"];
        severity?: components["parameters"]["AlertSeverity"];
        certainty?: components["parameters"]["AlertCertainty"];
        limit?: components["parameters"]["Limit"];
        cursor?: components["parameters"]["PaginationCursor"];
      };
    };
    responses: {
      200: components["responses"]["AlertCollection"];
      /** @description Certain common queries may be redirected to discrete URLs */
      301: {
        content: never;
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns all currently active alerts */
  alerts_active: {
    parameters: {
      query?: {
        status?: components["parameters"]["AlertStatus"];
        message_type?: components["parameters"]["AlertMessageType"];
        event?: components["parameters"]["AlertEventName"];
        code?: components["parameters"]["AlertCode"];
        area?: components["parameters"]["AlertArea"];
        point?: components["parameters"]["AlertPoint"];
        region?: components["parameters"]["AlertRegion"];
        region_type?: components["parameters"]["AlertRegionType"];
        zone?: components["parameters"]["AlertZone"];
        urgency?: components["parameters"]["AlertUrgency"];
        severity?: components["parameters"]["AlertSeverity"];
        certainty?: components["parameters"]["AlertCertainty"];
        limit?: components["parameters"]["Limit"];
      };
    };
    responses: {
      200: components["responses"]["AlertCollection"];
      /** @description Certain common queries may be redirected to discrete URLs */
      301: {
        content: never;
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns info on the number of active alerts */
  alerts_active_count: {
    responses: {
      /** @description A data structure showing the counts of active alerts broken down by various categories */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": {
            /** @description The total number of active alerts */
            total?: number;
            /** @description The total number of active alerts affecting land zones */
            land?: number;
            /** @description The total number of active alerts affecting marine zones */
            marine?: number;
            /** @description Active alerts by marine region */
            regions?: Record<string, number>;
            /** @description Active alerts by area (state/territory) */
            areas?: Record<string, number>;
            /** @description Active alerts by NWS public zone or county code */
            zones?: Record<string, number>;
          };
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns active alerts for the given NWS public zone or county */
  alerts_active_zone: {
    parameters: {
      path: {
        zoneId: components["parameters"]["NWSZoneId"];
      };
    };
    responses: {
      200: components["responses"]["AlertCollection"];
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns active alerts for the given area (state or marine area) */
  alerts_active_area: {
    parameters: {
      path: {
        /** @description State/area ID */
        area: components["schemas"]["AreaCode"];
      };
    };
    responses: {
      200: components["responses"]["AlertCollection"];
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns active alerts for the given marine region */
  alerts_active_region: {
    parameters: {
      path: {
        /** @description Marine region ID */
        region: components["schemas"]["MarineRegionCode"];
      };
    };
    responses: {
      200: components["responses"]["AlertCollection"];
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of alert types */
  alerts_types: {
    responses: {
      /** @description A list of recognized event types */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": {
            /** @description A list of recognized event types */
            eventTypes?: string[];
          };
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a specific alert */
  alerts_single: {
    parameters: {
      path: {
        /** @description Alert identifier */
        id: components["schemas"]["AlertId"];
      };
    };
    responses: {
      /** @description An alert record */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/geo+json": components["schemas"]["AlertGeoJson"];
          "application/ld+json": components["schemas"]["AlertJsonLd"];
          "application/cap+xml": components["schemas"]["AlertCap"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns metadata about a Center Weather Service Unit */
  cwsu: {
    parameters: {
      path: {
        cwsuId: components["parameters"]["NWSCenterWeatherServiceUnitId"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/ld+json": components["schemas"]["CenterWeatherServiceUnitJsonLd"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of Center Weather Advisories from a CWSU */
  cwas: {
    parameters: {
      path: {
        cwsuId: components["parameters"]["NWSCenterWeatherServiceUnitId"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/geo+json": components["schemas"]["CenterWeatherAdvisoryCollectionGeoJson"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of Center Weather Advisories from a CWSU */
  cwa: {
    parameters: {
      path: {
        cwsuId: components["parameters"]["NWSCenterWeatherServiceUnitId"];
        date: components["parameters"]["Date"];
        /** @description Sequence number */
        sequence: number;
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/geo+json": components["schemas"]["CenterWeatherAdvisoryGeoJson"];
          "application/vnd.noaa.uswx+xml": unknown;
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of SIGMET/AIRMETs */
  sigmetQuery: {
    parameters: {
      query?: {
        start?: components["parameters"]["QueryStartTime"];
        end?: components["parameters"]["QueryEndTime"];
        date?: components["parameters"]["QueryDate"];
        /** @description ATSU identifier */
        atsu?: components["schemas"]["ATSUIdentifier"];
        /** @description SIGMET sequence number */
        sequence?: components["schemas"]["SigmetSequenceNumber"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/geo+json": components["schemas"]["SigmetCollectionGeoJson"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of SIGMET/AIRMETs for the specified ATSU */
  sigmetsByATSU: {
    parameters: {
      path: {
        atsu: components["parameters"]["ATSUIdentifier"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/geo+json": components["schemas"]["SigmetCollectionGeoJson"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date */
  sigmetsByATSUByDate: {
    parameters: {
      path: {
        atsu: components["parameters"]["ATSUIdentifier"];
        date: components["parameters"]["Date"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/geo+json": components["schemas"]["SigmetCollectionGeoJson"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a specific SIGMET/AIRMET */
  sigmet: {
    parameters: {
      path: {
        atsu: components["parameters"]["ATSUIdentifier"];
        date: components["parameters"]["Date"];
        time: components["parameters"]["Time"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/geo+json": components["schemas"]["SigmetGeoJson"];
          "application/vnd.noaa.uswx+xml": unknown;
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns glossary terms */
  glossary: {
    responses: {
      /** @description A set of glossary terms */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": {
            "@context"?: components["schemas"]["JsonLdContext"];
            /** @description A list of glossary terms */
            glossary?: {
              /** @description The term being defined */
              term?: string;
              /** @description A definition for the term */
              definition?: string;
            }[];
          };
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns raw numerical forecast data for a 2.5km grid area */
  gridpoint: {
    parameters: {
      path: {
        wfo: components["parameters"]["GridpointWFO"];
        x: components["parameters"]["GridpointX"];
        y: components["parameters"]["GridpointY"];
      };
    };
    responses: {
      /** @description Gridpoint forecast data */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/geo+json": components["schemas"]["GridpointGeoJson"];
          "application/ld+json": components["schemas"]["GridpointJsonLd"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a textual forecast for a 2.5km grid area */
  gridpoint_forecast: {
    parameters: {
      query?: {
        units?: components["parameters"]["GridpointForecastUnits"];
      };
      header?: {
        "Feature-Flags"?: components["parameters"]["GridpointForecastFeatureFlags"];
      };
      path: {
        wfo: components["parameters"]["GridpointWFO"];
        x: components["parameters"]["GridpointX"];
        y: components["parameters"]["GridpointY"];
      };
    };
    responses: {
      200: components["responses"]["GridpointForecast"];
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a textual hourly forecast for a 2.5km grid area */
  gridpoint_forecast_hourly: {
    parameters: {
      query?: {
        units?: components["parameters"]["GridpointForecastUnits"];
      };
      header?: {
        "Feature-Flags"?: components["parameters"]["GridpointForecastFeatureFlags"];
      };
      path: {
        wfo: components["parameters"]["GridpointWFO"];
        x: components["parameters"]["GridpointX"];
        y: components["parameters"]["GridpointY"];
      };
    };
    responses: {
      200: components["responses"]["GridpointForecast"];
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of observation stations usable for a given 2.5km grid area */
  gridpoint_stations: {
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        cursor?: components["parameters"]["PaginationCursor"];
      };
      path: {
        wfo: components["parameters"]["GridpointWFO"];
        x: components["parameters"]["GridpointX"];
        y: components["parameters"]["GridpointY"];
      };
    };
    responses: {
      200: components["responses"]["ObservationStationCollection"];
      default: components["responses"]["Error"];
    };
  };
  /**
   * @deprecated
   * @description Returns a forecast icon. Icon services in API are deprecated.
   */
  icons: {
    parameters: {
      query?: {
        /** @description Font size */
        size?: ("small" | "medium" | "large") | number;
        /** @description Font size */
        fontsize?: number;
      };
      path: {
        /** @description . */
        set: string;
        /** @description . */
        timeOfDay: string;
        /** @description . */
        first: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "image/png": components["schemas"]["BinaryFile"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /**
   * @deprecated
   * @description Returns a forecast icon. Icon services in API are deprecated.
   */
  iconsDualCondition: {
    parameters: {
      query?: {
        /** @description Font size */
        size?: ("small" | "medium" | "large") | number;
        /** @description Font size */
        fontsize?: number;
      };
      path: {
        /** @description . */
        set: string;
        /** @description . */
        timeOfDay: string;
        /** @description . */
        first: string;
        /** @description . */
        second: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "image/png": components["schemas"]["BinaryFile"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /**
   * @deprecated
   * @description Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
   */
  icons_summary: {
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": {
            "@context"?: components["schemas"]["JsonLdContext"];
            icons: Record<
              string,
              {
                description: string;
              }
            >;
          };
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /**
   * @deprecated
   * @description Returns a thumbnail image for a satellite region. Image services in API are deprecated.
   */
  satellite_thumbnails: {
    parameters: {
      path: {
        /** @description . */
        area: "a" | "e" | "g" | "h" | "p" | "s" | "w";
      };
    };
    responses: {
      /** @description An image file */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "image/jpeg": components["schemas"]["BinaryFile"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of observations for a given station */
  station_observation_list: {
    parameters: {
      query?: {
        start?: components["parameters"]["QueryStartTime"];
        end?: components["parameters"]["QueryEndTime"];
        /** @description Limit */
        limit?: number;
      };
      path: {
        stationId: components["parameters"]["ObservationStationId"];
      };
    };
    responses: {
      200: components["responses"]["ObservationCollection"];
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns the latest observation for a station */
  station_observation_latest: {
    parameters: {
      query?: {
        /** @description Require QC */
        require_qc?: boolean;
      };
      path: {
        stationId: components["parameters"]["ObservationStationId"];
      };
    };
    responses: {
      200: components["responses"]["Observation"];
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a single observation. */
  station_observation_time: {
    parameters: {
      path: {
        stationId: components["parameters"]["ObservationStationId"];
        /** @description Timestamp of requested observation */
        time: string;
      };
    };
    responses: {
      200: components["responses"]["Observation"];
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns Terminal Aerodrome Forecasts for the specified airport station. */
  tafs: {
    parameters: {
      path: {
        stationId: components["parameters"]["ObservationStationId"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/ld+json": unknown;
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a single Terminal Aerodrome Forecast. */
  taf: {
    parameters: {
      path: {
        stationId: components["parameters"]["ObservationStationId"];
        date: components["parameters"]["Date"];
        time: components["parameters"]["Time"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/vnd.wmo.iwxxm+xml": unknown;
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of observation stations. */
  obs_stations: {
    parameters: {
      query?: {
        /** @description Filter by observation station ID */
        id?: string[];
        /** @description Filter by state/marine area code */
        state?: components["schemas"]["AreaCode"][];
        limit?: components["parameters"]["Limit"];
        cursor?: components["parameters"]["PaginationCursor"];
      };
    };
    responses: {
      200: components["responses"]["ObservationStationCollection"];
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns metadata about a given observation station */
  obs_station: {
    parameters: {
      path: {
        stationId: components["parameters"]["ObservationStationId"];
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/geo+json": components["schemas"]["ObservationStationGeoJson"];
          "application/ld+json": components["schemas"]["ObservationStationJsonLd"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns metadata about a NWS forecast office */
  office: {
    parameters: {
      path: {
        officeId: components["parameters"]["NWSOfficeId"];
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": components["schemas"]["Office"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a specific news headline for a given NWS office */
  office_headline: {
    parameters: {
      path: {
        officeId: components["parameters"]["NWSOfficeId"];
        /** @description Headline record ID */
        headlineId: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": components["schemas"]["OfficeHeadline"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of news headlines for a given NWS office */
  office_headlines: {
    parameters: {
      path: {
        officeId: components["parameters"]["NWSOfficeId"];
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": components["schemas"]["OfficeHeadlineCollection"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns metadata about a given latitude/longitude point */
  point: {
    parameters: {
      path: {
        point: components["parameters"]["PathPoint"];
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/geo+json": components["schemas"]["PointGeoJson"];
          "application/ld+json": components["schemas"]["PointJsonLd"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /**
   * @deprecated
   * @description Returns a list of observation stations for a given point
   */
  point_stations: {
    parameters: {
      path: {
        point: components["parameters"]["PathPoint"];
      };
    };
    responses: {
      /** @description redirect to gridpoint stations */
      301: {
        content: never;
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of radar servers */
  radar_servers: {
    parameters: {
      query?: {
        /** @description Show records from specific reporting host */
        reportingHost?: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": unknown;
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns metadata about a given radar server */
  radar_server: {
    parameters: {
      query?: {
        /** @description Show records from specific reporting host */
        reportingHost?: string;
      };
      path: {
        /** @description Server ID */
        id: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": unknown;
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of radar stations */
  radar_stations: {
    parameters: {
      query?: {
        /** @description Limit results to a specific station type or types */
        stationType?: string[];
        /** @description Show RDA and latency info from specific reporting host */
        reportingHost?: string;
        /** @description Show latency info from specific LDM host */
        host?: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/geo+json": unknown;
          "application/ld+json": unknown;
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns metadata about a given radar station */
  radar_station: {
    parameters: {
      query?: {
        /** @description Show RDA and latency info from specific reporting host */
        reportingHost?: string;
        /** @description Show latency info from specific LDM host */
        host?: string;
      };
      path: {
        /** @description Radar station ID */
        stationId: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/geo+json": unknown;
          "application/ld+json": unknown;
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns metadata about a given radar station alarms */
  radar_station_alarms: {
    parameters: {
      path: {
        /** @description Radar station ID */
        stationId: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": unknown;
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns metadata about a given radar queue */
  radar_queue: {
    parameters: {
      query?: {
        /** @description Record limit */
        limit?: number;
        /** @description Range for arrival time */
        arrived?: components["schemas"]["ISO8601Interval"];
        /** @description Range for creation time */
        created?: components["schemas"]["ISO8601Interval"];
        /** @description Range for publish time */
        published?: components["schemas"]["ISO8601Interval"];
        /** @description Station identifier */
        station?: string;
        /** @description Record type */
        type?: string;
        /** @description Originating product feed */
        feed?: string;
        /** @description Resolution version */
        resolution?: number;
      };
      path: {
        /** @description LDM host */
        host: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": unknown;
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns metadata about a given radar wind profiler */
  radar_profiler: {
    parameters: {
      query?: {
        /** @description Time interval */
        time?: components["schemas"]["ISO8601Interval"];
        /** @description Averaging interval */
        interval?: components["schemas"]["ISO8601Duration"];
      };
      path: {
        /** @description Profiler station ID */
        stationId: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": unknown;
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of text products */
  products_query: {
    parameters: {
      query?: {
        /** @description Location id */
        location?: string[];
        /** @description Start time */
        start?: string;
        /** @description End time */
        end?: string;
        /** @description Issuing office */
        office?: string[];
        /** @description WMO id code */
        wmoid?: string[];
        /** @description Product code */
        type?: string[];
        /** @description Limit */
        limit?: number;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": components["schemas"]["TextProductCollection"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of valid text product issuance locations */
  product_locations: {
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": components["schemas"]["TextProductLocationCollection"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of valid text product types and codes */
  product_types: {
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": components["schemas"]["TextProductTypeCollection"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a specific text product */
  product: {
    parameters: {
      path: {
        /** @description . */
        productId: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": components["schemas"]["TextProduct"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of text products of a given type */
  products_type: {
    parameters: {
      path: {
        /** @description . */
        typeId: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": components["schemas"]["TextProductCollection"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of valid text product issuance locations for a given product type */
  products_type_locations: {
    parameters: {
      path: {
        /** @description . */
        typeId: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": components["schemas"]["TextProductLocationCollection"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of valid text product types for a given issuance location */
  location_products: {
    parameters: {
      path: {
        /** @description . */
        locationId: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": components["schemas"]["TextProductTypeCollection"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of text products of a given type for a given issuance location */
  products_type_location: {
    parameters: {
      path: {
        /** @description . */
        typeId: string;
        /** @description . */
        locationId: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/ld+json": components["schemas"]["TextProductCollection"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of zones */
  zone_list: {
    parameters: {
      query?: {
        /** @description Zone ID (forecast or county) */
        id?: components["schemas"]["NWSZoneID"][];
        /** @description State/marine area code */
        area?: components["schemas"]["AreaCode"][];
        /** @description Region code */
        region?: components["schemas"]["RegionCode"][];
        /** @description Zone type */
        type?: components["schemas"]["NWSZoneType"][];
        /** @description Point (latitude,longitude) */
        point?: components["schemas"]["PointString"];
        /** @description Include geometry in results (true/false) */
        include_geometry?: boolean;
        /** @description Limit */
        limit?: number;
        /** @description Effective date/time */
        effective?: string;
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/geo+json": components["schemas"]["ZoneCollectionGeoJson"];
          "application/ld+json": components["schemas"]["ZoneCollectionJsonLd"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of zones of a given type */
  zone_list_type: {
    parameters: {
      query?: {
        /** @description Zone ID (forecast or county) */
        id?: components["schemas"]["NWSZoneID"][];
        /** @description State/marine area code */
        area?: components["schemas"]["AreaCode"][];
        /** @description Region code */
        region?: components["schemas"]["RegionCode"][];
        /** @description Zone type */
        type?: components["schemas"]["NWSZoneType"][];
        /** @description Point (latitude,longitude) */
        point?: components["schemas"]["PointString"];
        /** @description Include geometry in results (true/false) */
        include_geometry?: boolean;
        /** @description Limit */
        limit?: number;
        /** @description Effective date/time */
        effective?: string;
      };
      path: {
        /** @description Zone type */
        type: components["schemas"]["NWSZoneType"];
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/geo+json": components["schemas"]["ZoneCollectionGeoJson"];
          "application/ld+json": components["schemas"]["ZoneCollectionJsonLd"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns metadata about a given zone */
  zone: {
    parameters: {
      query?: {
        /** @description Effective date/time */
        effective?: string;
      };
      path: {
        /** @description Zone type */
        type: components["schemas"]["NWSZoneType"];
        zoneId: components["parameters"]["NWSZoneId"];
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/geo+json": components["schemas"]["ZoneGeoJson"];
          "application/ld+json": components["schemas"]["ZoneJsonLd"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns the current zone forecast for a given zone */
  zone_forecast: {
    parameters: {
      path: {
        /** @description Zone type */
        type: string;
        zoneId: components["parameters"]["NWSZoneId"];
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/geo+json": components["schemas"]["ZoneForecastGeoJson"];
          "application/ld+json": components["schemas"]["ZoneForecastJsonLd"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of observations for a given zone */
  zone_obs: {
    parameters: {
      query?: {
        /** @description Start date/time */
        start?: string;
        /** @description End date/time */
        end?: string;
        /** @description Limit */
        limit?: number;
      };
      path: {
        zoneId: components["parameters"]["NWSZoneId"];
      };
    };
    responses: {
      /** @description success */
      200: {
        headers: {
          "X-Correlation-Id": components["headers"]["CorrelationId"];
          "X-Request-Id": components["headers"]["RequestId"];
          "X-Server-Id": components["headers"]["ServerId"];
        };
        content: {
          "application/geo+json": components["schemas"]["ObservationCollectionGeoJson"];
          "application/ld+json": components["schemas"]["ObservationCollectionJsonLd"];
        };
      };
      default: components["responses"]["Error"];
    };
  };
  /** @description Returns a list of observation stations for a given zone */
  zone_stations: {
    parameters: {
      query?: {
        limit?: components["parameters"]["Limit"];
        cursor?: components["parameters"]["PaginationCursor"];
      };
      path: {
        zoneId: components["parameters"]["NWSZoneId"];
      };
    };
    responses: {
      200: components["responses"]["ObservationStationCollection"];
      default: components["responses"]["Error"];
    };
  };
}
